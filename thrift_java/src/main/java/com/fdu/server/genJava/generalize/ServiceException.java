/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fdu.server.genJava.generalize;

import org.apache.thrift.annotation.Nullable;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)", date = "2021-09-19")
public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");

  private static final org.apache.thrift.protocol.TField EXCEPTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCEPTION_MESS_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionMess", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ServiceExceptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ServiceExceptionTupleSchemeFactory();

  public @Nullable
  EXCCODE exceptionCode; // required
  public @org.apache.thrift.annotation.Nullable String exceptionMess; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCEPTION_CODE((short)1, "exceptionCode"),
    EXCEPTION_MESS((short)2, "exceptionMess");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCEPTION_CODE
          return EXCEPTION_CODE;
        case 2: // EXCEPTION_MESS
          return EXCEPTION_MESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCEPTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("exceptionCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "EXCCODE")));
    tmpMap.put(_Fields.EXCEPTION_MESS, new org.apache.thrift.meta_data.FieldMetaData("exceptionMess", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceException.class, metaDataMap);
  }

  public ServiceException() {
  }

  public ServiceException(
    EXCCODE exceptionCode,
    String exceptionMess)
  {
    this();
    this.exceptionCode = exceptionCode;
    this.exceptionMess = exceptionMess;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceException(ServiceException other) {
    if (other.isSetExceptionCode()) {
      this.exceptionCode = other.exceptionCode;
    }
    if (other.isSetExceptionMess()) {
      this.exceptionMess = other.exceptionMess;
    }
  }

  public ServiceException deepCopy() {
    return new ServiceException(this);
  }

  @Override
  public void clear() {
    this.exceptionCode = null;
    this.exceptionMess = null;
  }

  @org.apache.thrift.annotation.Nullable
  public EXCCODE getExceptionCode() {
    return this.exceptionCode;
  }

  public ServiceException setExceptionCode(@org.apache.thrift.annotation.Nullable EXCCODE exceptionCode) {
    this.exceptionCode = exceptionCode;
    return this;
  }

  public void unsetExceptionCode() {
    this.exceptionCode = null;
  }

  /** Returns true if field exceptionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionCode() {
    return this.exceptionCode != null;
  }

  public void setExceptionCodeIsSet(boolean value) {
    if (!value) {
      this.exceptionCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getExceptionMess() {
    return this.exceptionMess;
  }

  public ServiceException setExceptionMess(@org.apache.thrift.annotation.Nullable String exceptionMess) {
    this.exceptionMess = exceptionMess;
    return this;
  }

  public void unsetExceptionMess() {
    this.exceptionMess = null;
  }

  /** Returns true if field exceptionMess is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionMess() {
    return this.exceptionMess != null;
  }

  public void setExceptionMessIsSet(boolean value) {
    if (!value) {
      this.exceptionMess = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case EXCEPTION_CODE:
      if (value == null) {
        unsetExceptionCode();
      } else {
        setExceptionCode((EXCCODE)value);
      }
      break;

    case EXCEPTION_MESS:
      if (value == null) {
        unsetExceptionMess();
      } else {
        setExceptionMess((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCEPTION_CODE:
      return getExceptionCode();

    case EXCEPTION_MESS:
      return getExceptionMess();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCEPTION_CODE:
      return isSetExceptionCode();
    case EXCEPTION_MESS:
      return isSetExceptionMess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ServiceException)
      return this.equals((ServiceException)that);
    return false;
  }

  public boolean equals(ServiceException that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_exceptionCode = true && this.isSetExceptionCode();
    boolean that_present_exceptionCode = true && that.isSetExceptionCode();
    if (this_present_exceptionCode || that_present_exceptionCode) {
      if (!(this_present_exceptionCode && that_present_exceptionCode))
        return false;
      if (!this.exceptionCode.equals(that.exceptionCode))
        return false;
    }

    boolean this_present_exceptionMess = true && this.isSetExceptionMess();
    boolean that_present_exceptionMess = true && that.isSetExceptionMess();
    if (this_present_exceptionMess || that_present_exceptionMess) {
      if (!(this_present_exceptionMess && that_present_exceptionMess))
        return false;
      if (!this.exceptionMess.equals(that.exceptionMess))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExceptionCode()) ? 131071 : 524287);
    if (isSetExceptionCode())
      hashCode = hashCode * 8191 + exceptionCode.getValue();

    hashCode = hashCode * 8191 + ((isSetExceptionMess()) ? 131071 : 524287);
    if (isSetExceptionMess())
      hashCode = hashCode * 8191 + exceptionMess.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ServiceException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetExceptionCode(), other.isSetExceptionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionCode, other.exceptionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetExceptionMess(), other.isSetExceptionMess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionMess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionMess, other.exceptionMess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceException(");
    boolean first = true;

    sb.append("exceptionCode:");
    if (this.exceptionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionMess:");
    if (this.exceptionMess == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionMess);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (exceptionCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exceptionCode' was not present! Struct: " + toString());
    }
    if (exceptionMess == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exceptionMess' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceExceptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServiceExceptionStandardScheme getScheme() {
      return new ServiceExceptionStandardScheme();
    }
  }

  private static class ServiceExceptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ServiceException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCEPTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exceptionCode = EXCCODE.findByValue(iprot.readI32());
              struct.setExceptionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCEPTION_MESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptionMess = iprot.readString();
              struct.setExceptionMessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exceptionCode != null) {
        oprot.writeFieldBegin(EXCEPTION_CODE_FIELD_DESC);
        oprot.writeI32(struct.exceptionCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.exceptionMess != null) {
        oprot.writeFieldBegin(EXCEPTION_MESS_FIELD_DESC);
        oprot.writeString(struct.exceptionMess);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceExceptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServiceExceptionTupleScheme getScheme() {
      return new ServiceExceptionTupleScheme();
    }
  }

  private static class ServiceExceptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ServiceException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.exceptionCode.getValue());
      oprot.writeString(struct.exceptionMess);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.exceptionCode = EXCCODE.findByValue(iprot.readI32());
      struct.setExceptionCodeIsSet(true);
      struct.exceptionMess = iprot.readString();
      struct.setExceptionMessIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

